(* This first rule is the top-level one. *)
   block = ( syntax-in-block / any-char )*
   (* `/` ordered alternation is used to, for example, try to interpret a string beginning with '[[' as a page-link before interpreting it as raw characters. *)

   <syntax-in-block> = (hashtag | page-link | block-ref | special-action | code-line | metadata-tag | url-link | bold | italic | highlight | strikethrough)

   page-link = #"\[\[.*?\]\]" (* <'[['> any-chars <']]'>* *)

   block-ref = #'\(\(.*?\)\)'

   metadata-tag = any-chars <'::'>

   code-line = <'`'> any-chars <'`'>

   <special-action> = (query | youtube-embed | word-count) (* <'{{'> any-chars <'}}'> *)

   query = <'{{query: '> any-chars <'}}'>
   youtube-embed = <'{{youtube: '> any-chars <'}}'>
   word-count = <'{{word-count}}'>

   hashtag = hashtag-bare | hashtag-delimited
   <hashtag-bare> = <'#'> #'[\\p{L}\\p{M}\\p{N}_]+'  (* Unicode: L = letters, M = combining marks, N = numbers *)
   <hashtag-delimited> = <'#'> <'[['> #'[^\\]]+' <']]'>

   url-link = url-link-text url-link-url
   <url-link-text> = <'['> url-link-text-contents <']'>
   url-link-text-contents = ( (bold | backslash-escaped-right-bracket) / any-char )*
   <backslash-escaped-right-bracket> = <'\\\\'> ']'
   <url-link-url> = <'('> url-link-url-parts <')'>
   url-link-url-parts = url-link-url-part+
   <url-link-url-part> = (backslash-escaped-paren | '(' url-link-url-part* ')') / any-char
   <backslash-escaped-paren> = <'\\\\'> ('(' | ')')

   bold = <'**'> any-chars <'**'>
   italic = <'__'> any-chars <'__'>
   highlight = <'^^'> any-chars <'^^'>
   strikethrough = <'~~'> any-chars <'~~'>

   (* It’s useful to extract this rule because its transform joins the individual characters everywhere it’s used. *)
   (* However, I think in many cases a more specific rule can be used. So we will migrate away from uses of this rule. *)
   any-chars = any-char+

   <any-char> = #'\w|\W'